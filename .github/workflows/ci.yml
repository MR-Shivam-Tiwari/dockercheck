name: CI/CD Pipeline - Hostinger VPS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Manual trigger option

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üß† Checkout Code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:latest
            ${{ secrets.DOCKER_USERNAME }}/my-node-app:${{ github.sha }}

      - name: üåç Deploy to Hostinger VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Set variables
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/my-node-app"
            CONTAINER_NAME="myapp"
            
            echo "üîÑ Pulling latest Docker image..."
            docker pull "$IMAGE_NAME:latest"
            
            echo "üõë Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            echo "üßπ Cleaning up old images..."
            docker image prune -af || true
            
            echo "üöÄ Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p 5003:5003 \
              -e NODE_ENV=production \
              --log-driver=json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              "$IMAGE_NAME:latest"
            
            echo "‚úÖ Deployment complete!"
            
            # Verify deployment with timeout
            echo "üîç Verifying deployment..."
            sleep 15
            
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "‚úÖ Container is running successfully!"
              echo "üìä Container status:"
              docker ps | grep $CONTAINER_NAME
              echo "üìù Recent logs:"
              docker logs $CONTAINER_NAME --tail 10
              
              # Test app response
              echo "üåê Testing application response..."
              if timeout 30s bash -c 'until curl -f http://localhost:5003 &>/dev/null; do sleep 2; done'; then
                echo "‚úÖ Application is responding successfully!"
              else
                echo "‚ö†Ô∏è  Application may still be starting up"
              fi
            else
              echo "‚ùå Container failed to start!"
              echo "üìù Container logs:"
              docker logs $CONTAINER_NAME --tail 50
              echo "üîç Docker system info:"
              docker system df
              exit 1
            fi
            
            # Show final status
            echo "üéâ Deployment Summary:"
            echo "- Container: $CONTAINER_NAME"
            echo "- Image: $IMAGE_NAME:latest"
            echo "- Port: 5003"
            echo "- Status: $(docker inspect --format='{{.State.Status}}' $CONTAINER_NAME)"
            echo "- URL: http://82.112.231.34:5003"
