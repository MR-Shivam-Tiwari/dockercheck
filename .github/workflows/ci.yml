name: CI/CD Pipeline - Hostinger VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger option

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üß† Checkout Code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/my-node-app"
          TAG="${GITHUB_SHA}"
          docker build -t "$IMAGE_NAME:latest" -t "$IMAGE_NAME:$TAG" .

      - name: üöÄ Push image to Docker Hub
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/my-node-app"
          TAG="${GITHUB_SHA}"
          docker push "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:$TAG"

      - name: üåç Deploy to Hostinger VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            # Set variables
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/my-node-app"
            CONTAINER_NAME="myapp"
            
            echo "üîÑ Pulling latest Docker image..."
            docker pull "$IMAGE_NAME:latest"
            
            echo "üõë Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            echo "üßπ Cleaning up old images..."
            docker image prune -af || true
            
            echo "üöÄ Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p 5003:5003 \
              --health-cmd="curl -f http://localhost:5003/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              "$IMAGE_NAME:latest"
            
            echo "‚úÖ Deployment complete!"
            
            # Verify deployment
            sleep 10
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "‚úÖ Container is running successfully!"
              docker logs $CONTAINER_NAME --tail 20
            else
              echo "‚ùå Container failed to start"
              docker logs $CONTAINER_NAME
              exit 1
            fi
